library(swirl)
?InstallCourses
install_course("Statistical Inference")
n_draws<-10000
prior<-runif(n_draws) #random uniform distribution with default between 0-1
hist(prior) # check histogram
rbinom(1,10,0.4)
rbinom(10,1,0.4)
rbinom(10,10,0.4)
rbinom(10,10,0.1)
rbinom(10,10,0.9)
generative_model <- function(c,a=1,b=16){
subscribers<-rbinom(a,b,c)
subscribers
}
generative_model(0.4)
generative_model(0.4)
generative_model(0.4)
generative_model(0.4)
subscribers<-rep(NA,n_draws)
for(i in 1:n_draws){
subscribers[i]<-generative_model(prior[i])
}
posterior<-prior[subscribers==6]
hist(posterior,xlim=c(0,1))
mean(posterior)
quantile(posterior,c(0.025,0.975))
rm(list=ls())
library(text2vec)
install.packages("text2vec")
install.packages("text2vec")
library("text2vec", lib.loc="~/Library/R/3.4/library")
text8_file = "~/text8"
if (!file.exists(text8_file)) {
download.file("http://mattmahoney.net/dc/text8.zip", "~/text8.zip")
unzip ("~/text8.zip", files = "text8", exdir = "~/")
}
wiki = readLines(text8_file, n = 1, warn = FALSE)
head(wiki)
summary(wiki)
install.packages("text2vec")
tokens <- space_tokenizer(wiki)
library("text2vec", lib.loc="~/Library/R/3.4/library")
tokens <- space_tokenizer(wiki)
it = itoken(tokens, progressbar = FALSE)
vocab <- create_vocabulary(it)
vocab <- prune_vocabulary(vocab, term_count_min = 5L)
summary(vocab)
vectorizer <- vocab_vectorizer(vocab,
# don't vectorize input
grow_dtm = FALSE,
# use window of 5 for context words
skip_grams_window = 5L)
tcm <- create_tcm(it, vectorizer)
glove = GlobalVectors$new(word_vectors_size = 50, vocabulary = vocab, x_max = 10)
glove$fit(tcm, n_iter = 20)
word_vectors <- glove$get_word_vectors()
install.packages("imager")
library(imager)
plot(boats)
boats
#Map grayscale values to blue
cscale <- function(v) rgb(0,0,v)
grayscale(boats) %>% plot(colourscale=cscale,rescale=FALSE)
grayscale(boats)
plot(grayscale(boats))
grayscale(boats) %>% hist(main="Luminance values in boats picture")
hist(grayscale(boats))
grayscale(boats) %>% hist(main="Luminance values in boats picture")
hist(grayscale(boats))
library(imager)
plot(boats)
hist(grayscale(boats))
grayscale(boats)
R(boats)
hist(R(boats))
hist(channel(boats,1))
for (i in 1:3){
hist(channel(boats,i))}
for (i in 1:3){
hist(channel(boats,i))
i
}
for (i in 1:3){
#hist(channel(boats,i))
i
}
for (i in 1:3){
#hist(channel(boats,i))
print(i)
}
hist(channel(boats,i))
print(i)
for (i in 1:3){
#hist(channel(boats,i))
print(i)
}
for (i in 1:3){
channelplot[i]<-hist(channel(boats,i))
print(i)
}
channelplot<-hist(channel(boats,i))
for (i in 1:3){
channelplot<-hist(channel(boats,i))
print(i)
}
hist(channel(boats,1))
hist(channel(boats,1),main="Red channel values in boats picture")
hist(R(boats))
hist(G(boats))
hist(B(boats))
library(ggplot2)
bdf <- as.data.frame(boats)
head(bdf,3)
bdf <- plyr::mutate(bdf,channel=factor(cc,labels=c('R','G','B')))
ggplot(bdf,aes(value,col=channel))+geom_histogram(bins=30)+facet_wrap(~ channel)
mean(R(boats))
mean(G(boats))
mean(B(boats))
x <- rnorm(100)
layout(t(1:2))
hist(x,main="Histogram of x")
f <- ecdf(x)
hist(f(x),main="Histogram of ecdf(x)")
boats.g <- grayscale(boats)
f <- ecdf(boats.g)
plot(f,main="Empirical CDF of luminance values")
rgb2hsv(boats)
dim(boats)
R(boats)
rw <- R(boats) %>% imrow(10)
rw
R(boats)
channel(boats,R)
channel(boats,1)
channel(boats,2)
plot(channel(boats,2))
hist(channel(boats,2))
plot(channel(boats,1))
plot(channel(boats,3))
R(boats) %>% imrow(1) %>% str
imrow(boats,1) %>% str
library(imager)
plot(boats)
hist(grayscale(boats))
plot(boats)
hist(grayscale(boats))
grayscale(boats)
hist(R(boats))
hist(channel(boats,1),main="Red channel values in boats picture")
library(ggplot2)
bdf <- as.data.frame(boats)
head(bdf,3)
bdf <- plyr::mutate(bdf,channel=factor(cc,labels=c('R','G','B')))
bdf
bdf <- as.data.frame(boats)
head(bdf,3)
bdf <- plyr::mutate(bdf,channel=factor(cc,labels=c('R','G','B')))
head(bdf,3)
library(biOps)
install.packages("biOps")
library(jpeg)
img <- readJPEG("Rlogo.jpg")
dir()
a<-c(0,0,0,1,1)
b<-c(0,0,1,1,1)
c<-c(0,0,0,0,1)
d<-c(1,1,0,0,0)
M<-data.frame(a,b,c,d)
View(M)
cor(M)
cor(M)
cor(M,M)
cor(a,b)
cor(d,a)
cor(a,c)
M<-sample(1:100,100,replace=T)
hist(M)
M<-sample(1:100,30,replace=T)
hist(M)
M<-sample(1:1000,100,replace=T)
hist(M)
M<-sample(1:1000,50,replace=T)
hist(M)
n_draws<-10000
prior<-runif(n_draws)
hist(prior)
generative_model <- function(c,a=1,b=16){
subscribers<-rbinom(a,b,c)
subscribers
}
subscribers<-rep(NA,n_draws)
for(i in 1:n_draws){
subscribers[i]<-generative_model(prior[i])
}
posteriorB<-prior[subscribers==10]
hist(posteriorB,xlim=c(0,1))
rbeta(0.5,0.5)
rbeta(1:100,0.5,0.5)
M1<-rbeta(1:100,0.5,0.5)
hist(M1)
M1<-rbeta(1:100,0.5,1)
hist(M1)
M1<-rbeta(1:100,2,15)
hist(M1)
M1<-rbeta(1:100,15,3)
hist(M1)
M1<-rbeta(1:100,25,2)
hist(M1)
M1<-rbeta(1:1000,25,2)
hist(M1)
M1<-rbeta(1:1000,2,2)
hist(M1)
M1<-rbeta(1:1000,0.8,0.5)
hist(M1)
plot(M1)
install.packages("R.matlab")
getwd()
setwd("~/code/Matlab")
getwd()
library("R.matlab", lib.loc="~/Library/R/3.4/library")
?R.matlab
readMat("dataset.mat")
dataset<-readMat("dataset.mat")
tail(dataset)
dim(dataset)
str(dataset)
View(generative_model)
dataset
dim(dataset)
str(dataset)
dataset[1,1,79]
dataset[1,79]
dataset[79]
data
str(dataset)
class(dataset)
dataset[1]
dataset[1,79,1]
dataset[1,1,1]
dataset[1][1,1]
getwd()
setwd("/Users/rgrouls/code/Matlab/feature_extraction")
setwd("~/code/Matlab/feature_extraction")
setwd("~/code/Matlab/feature_extraction/")
setwd(~/code/Matlab/feature_extraction/)
getwd()
setwd("~/code")
getwd()
ls
dir()
setwd(~/)
setwd("~/")
dir()
setwd("~/Dropbox")
dir()
setwd("/Lumen")
setwd("~/Dropbox/Lumen")
dir()
setwd("~/Dropbox/Lumen/innovtie")
setwd("~/Dropbox/Lumen/innovatie")
dir()
setwd("~/Dropbox/Lumen/innovatie/acceleratie bewustzijn")
dir()
setwd("~/Dropbox/Lumen/innovatie/acceleratie bewustzijn/Matlab")
dir()
readMat("dataset.mat")
dataset2<-readMat("dataset.mat")
str(dataset2)
dataset2[1]
